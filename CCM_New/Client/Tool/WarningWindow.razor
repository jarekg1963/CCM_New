
@using CCM_New.Client.Tool;

@if (ShowConfirmation)
{
    <div class="modal fade show d-block" id="exampleModal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">

                    <h5 class="modal-title" id="exampleModalLabel"> <span class="oi oi-task" aria-hidden="true"></span><span>&nbsp&nbsp</span>@ConfirmationTitle</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"
                            @onclick="() => OnConfirmationChange(false)">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    @ConfirmationMessage
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal"
                            @onclick="() => OnConfirmationChange(false)">
                        @ButtonNo
                    </button>
                    @*<button type="button" class="btn btn-danger"
                            @onclick="() => OnConfirmationChange(true)">
                        @ButtonYes
                    </button>*@
                </div>
            </div>
        </div>
    </div>
}

<style>
    .modal-content {
        background-color: #f2f3f5;
    }

    .modal-body {
        background-color: #fafbfc;
    }
</style>
@code {
    protected bool ShowConfirmation { get; set; }

    [Parameter]
    public string ConfirmationTitle { get; set; } = "Confirm Delete";

    [Parameter]
    public string ConfirmationMessage { get; set; } = "Are you sure you want to delete";

    [Parameter]
    public string ButtonYes { get; set; } = "Delete";

    [Parameter]
    public string ButtonNo { get; set; } = "Cancel";

    public void Show()
    {
        ShowConfirmation = true;
        StateHasChanged();
    }

    [Parameter]
    public EventCallback<bool> ConfirmationChanged { get; set; }

    protected async Task OnConfirmationChange(bool value)
    {
        ShowConfirmation = false;
        await ConfirmationChanged.InvokeAsync(value);
    }
}
