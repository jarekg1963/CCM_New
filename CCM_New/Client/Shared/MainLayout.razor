@inherits LayoutComponentBase
@inject LoginService loginService
@inject HttpClient httpClient
@using Syncfusion.Blazor.Popups;
@using Syncfusion.Blazor.Buttons;
@inject NavigationManager navigationManager;
@using Syncfusion.Blazor.Notifications;
@using Syncfusion.Blazor.Navigations
@using Microsoft.Extensions.Configuration
@using CCM_New.Shared;
@using CCM_New.Client.Tool; 

@if (loginService.isLogged == true)
{
    <div class="sidebar">
        <NavMenu />
    </div>
    <div class="main">
        <div class="top-row px-4">
            <div class="col-2" style="margin-top:10px">
                <p>User: @loginService.session.user.UserName</p>
            </div>
            <div class="col-2">
                <span class="oi oi-account-logout" aria-hidden="true" style="align-self:auto"> </span>
                <a href="" style="cursor: pointer" @onclick="() => Wyloguj()">Logout</a>
            </div>
            <div class="col-1">

                <button class="btn1" @onclick="OpenPasswordChange" data-toggle="tooltip" data-placement="bottom" title="Password change">
                
                    <span class="oi oi-people" aria-hidden="true"></span>
                </button>


            </div>
        </div>
        <div class="content px-4">
            @Body
        </div>
    </div>
}
else
{
    <SfDialog ID="dialog" IsModal="true" Width="500px" Height="450px" @bind-Visible="@LoginPageVisible">
        <DialogTemplates>
            <Header>
                <nav id="navbar-example2" class="navbar navbar-light bg-light">
                    <div id="heading" style="margin-top:5px ;margin-left: auto ; margin-right:auto">Sign In</div>
                </nav>
            </Header>
            <Content>
                <div id='input-container'>
                    <div class="e-float-input e-input-group">
                        <input id="username" type="text" @bind="user.UserName" required />
                        <span class="e-float-line"></span>
                        <label class="e-float-text">User name</label>
                    </div>
                </div>
                <div class='form-group'>
                    <div class="e-float-input e-input-group">
                        <input id="password" type="password" @bind="user.UserPassword" required />
                        <span class="e-float-line"></span>
                        <label class="e-float-text">Password</label>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(this.ErrorMessage))
                {

                    <div class="error-container">
                        @ErrorMessage
                    </div>
                }
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <div class="row" style="margin-top:50px">
                <div class="col-2">
                    <SfButton Content="Log In" OnClick="@login" />
                </div>

            </div>
            <div class="row" style="margin-top:20px">
                <div class="col-8">
                    <p>Ver: @loginService.softVersion</p>
                </div>
                <div class="col-4">
                    <SfButton CssClass="e-link" OnClick="createNewUserRequest">Request for account</SfButton>
                </div>
            </div>
        </DialogButtons>
        <DialogEvents OnClose="@Validation"></DialogEvents>
        <DialogPositionData X="center" Y="center"></DialogPositionData>
    </SfDialog>
}

<SfDialog ID="dialog" IsModal="true" Width="600px" Height="550px" @bind-Visible="@createAccount" Target="@Target">
    <DialogTemplates>
        <Header>
            <nav id="navbar-example2" class="navbar navbar-light bg-light">
                <div id="heading" style="margin-top:5px ;margin-left: auto ; margin-right:auto">Account creation </div>
            </nav>

        </Header>
        <Content>
            <div id='input-container'>
                <div class="e-float-input e-input-group">
                    <input id="username" type="text" @bind="NewUser.UserName" required />
                    <span class="e-float-line"></span>
                    <label class="e-float-text">User name/email</label>
                </div>

                <div class='form-group' style="margin-top:0px!important">
                    <div class="e-float-input e-input-group">
                        <input id="password" type="password" @bind="NewUser.UserPassword" required />
                        <span class="e-float-line"></span>
                        <label class="e-float-text">Password</label>
                    </div>
                    <div class="e-float-input e-input-group" style="margin-top:0px!important">
                        <input id="password" type="password" @bind="passwordVrification" required />
                        <span class="e-float-line"></span>
                        <label class="e-float-text">Repeat password </label>
                    </div>
                    <div class="e-float-input e-input-group">
                        <textarea class="form-control" @bind="NewUser.Remarks" aria-label="With textarea"></textarea>
                        <span class="e-float-line"></span>
                        <label class="e-float-text">Remarks </label>
                    </div>
                </div>
            </div>
          
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <div class="row">
            <div class="col-2">
                <SfButton Content="Create" OnClick="@loginCreate" />
            </div>
            <div class="col-2">
                <SfButton Content="Cancel" OnClick="@CloseCreateAccountWindows" />
            </div>
        </div>
    </DialogButtons>
    <DialogEvents OnClose="@ValidationCreateAccount"></DialogEvents>
    @*<DialogPositionData X="center" Y="center"></DialogPositionData>*@
</SfDialog>


<SfDialog ID="dialog" IsModal="true" Width="400px" Height="300px" @bind-Visible="@changePassword" Target="@Target">
    <DialogTemplates>
        <Header>
            <nav id="navbar-example2" class="navbar navbar-light bg-light">
                <div id="heading" style="margin-top:5px ;margin-left: auto ; margin-right:auto"> Enter new password </div>
            </nav>

        </Header>
        <Content>
            <div id='input-container'>
                <div class='form-group' style="margin-top:0px!important">
                    <div class="e-float-input e-input-group">
                        <input id="password" type="password" @bind="newPassword" required />
                        <span class="e-float-line"></span>
                        <label class="e-float-text">Password</label>
                    </div>
                    <div class="e-float-input e-input-group" style="margin-top:0px!important">
                        <input id="password" type="password" @bind="newPasswordVerification" required />
                        <span class="e-float-line"></span>
                        <label class="e-float-text">Repeat password </label>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(this.ErrorMessagePassVerification))
        {
            <div class="errorCreate-container" style="margin-top:0px">
                @ErrorMessagePassVerification
            </div>
        }
            </div>
       
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <div class="row">
            <div class="col-2">
                <SfButton Content="Create" OnClick="@ChangePasswordOK" />
            </div>
            <div class="col-2">
                <SfButton Content="Cancel" OnClick="@ChangePasswordCance" />
            </div>
        </div>
    </DialogButtons>
    <DialogEvents OnClose="@ValidationCreateAccount"></DialogEvents>
    @*<DialogPositionData X="center" Y="center"></DialogPositionData>*@
</SfDialog>


<SfToast @ref="ToastObj" Title="Error" Content="User exist . Contact with administartor" CssClass="e-toast-danger">
    <ToastPosition X="Right"></ToastPosition>
</SfToast>

<SfToast @ref="ToastObjPass" Title="Error" Content="Passwords are to the same " CssClass="e-toast-danger">
    <ToastPosition X="Right"></ToastPosition>
</SfToast>

<SfToast @ref="ToastObjAllFields" Title="Error" Content="Fill in all fields " CssClass="e-toast-danger">
    <ToastPosition X="Right"></ToastPosition>
</SfToast>

<SfToast @ref="ToastObjCreated" Title="Error" Content="User created ask administrator about activation  " CssClass="e-toast-danger">
    <ToastPosition X="Right"></ToastPosition>
</SfToast>


@code{
    SfToast ToastObj;
    SfToast ToastObjPass;
    SfToast ToastObjCreated;
    SfToast ToastObjAllFields;
    private string Target { get; set; } = "body";
    private string ErrorMessage { get; set; } = "";
    private string ErrorMessageCreate { get; set; } = "";
    CCM_New.Shared.TblUsers user = new CCM_New.Shared.TblUsers() { UserName = "", UserPassword = "", Remarks = "" };
    CCM_New.Shared.TblUsers NewUser = new CCM_New.Shared.TblUsers() { UserName = "", UserPassword = "", Remarks = "" };
    public bool LoginPageVisible = true;
    public bool createAccount = false;
    public string ToastMessageTxT = "";
    public string passwordVrification = "";
    public string zmRemarks = "";
    public string IconCss = "e-icons e-play";
    public bool changePassword = false;
    public string newPassword = "";
    public string newPasswordVerification = "";
    public TblUsers[] UsersList = { };
    public bool verifyNewAccount = false;
    public string ErrorMessagePassVerification = "";

    private void OpenPasswordChange()
    {
        changePassword = true;
        ErrorMessagePassVerification = "";
        newPasswordVerification = "";
        newPassword = "";
    }

    private async void ChangePasswordOK()
    {
        if (newPasswordVerification == newPassword && newPassword != "")
        {
            int iid = loginService.session.user.Id;
            string linktmp = "/api/TblUsers/PutTblUsersPassChange/" + iid.ToString() + "?newPass=" + newPassword.Trim(); ;
            var response = await httpClient.PutAsJsonAsync<TblUsers>(linktmp, NewUser);

            changePassword = false;

        }
        else
        {
            ErrorMessagePassVerification = "Passwords not the same or empty";
        }
    }


    private void ChangePasswordCance()
    {
        changePassword = false;
    }

    private void Validation(BeforeCloseEventArgs args)
    {
        if (user.UserName == "" && user.UserPassword == "")
        {
            args.Cancel = true;
            this.LoginPageVisible = true;
            this.ErrorMessage = "Enter the Username and Password";
        }
    }

    private void ValidationCreateAccount(BeforeCloseEventArgs args)
    {
        if (verifyNewAccount)
        {
            if (NewUser.UserName == "" && NewUser.UserPassword == "")
            {
                args.Cancel = true;
                // this.LoginPageVisible = true;
                this.ErrorMessageCreate = "Enter the Username and Password";
            }
        }
    }

    override protected void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        this.IconCss = "e-icons e-pause";
        if (firstRender)
        {
            loginService.refresh += (() => StateHasChanged());
            checkSession();
        }
    }

    async void checkSession()
    {
        string sessionID = await loginService.jSRuntime.InvokeAsync<string>("ReadLocalStorage", new object[] { this.loginService.sessionKey });
        Console.WriteLine($"Session id: {sessionID}");
        if (sessionID != "")
        {
            try
            {
                var session = await httpClient.GetFromJsonAsync<LoginService.Session>($"./api/session?sessionID={sessionID}");

                if (session.ok == true)
                {
                    loginService.session = session;
                    loginService.sessionID = sessionID;
                    loginService.isLogged = true;
                    await loginService.jSRuntime.InvokeVoidAsync("WriteLocalStorage", new object[] { this.loginService.sessionKey, this.loginService.sessionID });
                    this.VerifySecurityLevel();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        loginService.CallRefresh();
    }

    async void login()
    {
        var resp = await httpClient.PostAsJsonAsync<LoginService.Session>("./api/login", new LoginService.Session { user = this.user });
        LoginService.Session s = await resp.Content.ReadFromJsonAsync<LoginService.Session>();
        if (s.ok == true)
        {
            this.loginService.session = s;
            this.loginService.sessionID = s.sessionID;
            this.loginService.isLogged = true;
            await loginService.jSRuntime.InvokeVoidAsync("WriteLocalStorage", new object[] { this.loginService.sessionKey, this.loginService.sessionID });
            LoginPageVisible = false;
            this.VerifySecurityLevel();
            loginService.CallRefresh();
        }
        else
        {
            this.LoginPageVisible = true;
            this.ErrorMessage = "Wrong Username or Password try again";
        }
    }

    public  async void  loginCreate()
    {
        if (NewUser.UserPassword.Trim().Length == 0 && passwordVrification.Trim().Length == 0 &&  NewUser.UserPassword.Trim().Length == 0)
        {
            await ToastObjAllFields.Show();
        }
        else
        {
            string linkRC = "/api/TblUsers/FindUserByName/" + NewUser.UserName;
            UsersList = await httpClient.GetFromJsonAsync<TblUsers[]>(linkRC);
            if (UsersList.Length > 0)
            {
                // Usytkownik istnieje 
                await ToastObj.Show();
            }
            else
            {
                // Uzytkownik nie istnije spradz haslo 
                if (NewUser.UserPassword == passwordVrification & NewUser.UserPassword.Trim().Length != 0)
                {

                    string postclaimLink = "/api/TblUsers/";
                    var response = await httpClient.PostAsJsonAsync<TblUsers>(postclaimLink, NewUser);

                    await ToastObjCreated.Show();
                    createAccount = false;
                }
                else
                {
                    await ToastObjPass.Show();
                }

            }
        }
    }

    async void Wyloguj()
    {
        Console.WriteLine("Wyloguj ");
        await loginService.jSRuntime.InvokeVoidAsync("WriteLocalStorage", new object[] { this.loginService.sessionKey, "" });
        this.loginService.session = null;
        this.loginService.sessionID = "";
        this.loginService.isLogged = false;
        this.loginService.CallRefresh();
        StateHasChanged();
    }

    private void VerifySecurityLevel()
    {
        if (loginService.session.user.UserRole.Trim() == "Admin")
        {
            loginService.securityLevel = 100;
        }
        if (loginService.session.user.UserRole.Trim() == "Warehouse")
        {
            loginService.securityLevel = 10;
        }
        if (loginService.session.user.UserRole.Trim() == "TPV")
        {
            loginService.securityLevel = 20;
        }


        loginService.CallRefresh();

    }

    private void createNewUserRequest()
    {

        this.Target = "#dialog.e-dialog";
        createAccount = true;
    }

    private void CloseCreateAccountWindows()
    {
        createAccount = false;
    }

}

<style>


    .btn1 {
        border: none;
        color: black;
        padding: 12px 16px;
        font-size: 16px;
        cursor: pointer;
    }

    .e-plus-icon::before {
        content: '\e823';
    }

    #elementToastTime .e-toast-message {
        padding: 10px;
        text-align: center;
    }

    #dialog.e-dialog .e-dlg-header-content .e-dlg-header {
        text-align: center;
        width: 100%;
        color: #333;
        font-weight: bold;
        font-size: 20px;
    }

    #input-container .e-float-input { /* csslint allow: adjoining-classes */
        margin: 17px 0;
    }

    .e-footer-content {
        padding: 20px 0 0;
        width: 100%;
    }

    .e-dialog .e-footer-content .e-btn {
        width: 100%;
        height: 36px;
    }

    #heading {
        color: #333;
        font-weight: bold;
        margin: 0 0 15px;
        text-align: center;
        font-size: 20px;
    }

    #dialog.e-dialog .e-footer-content {
        padding: 0 18px 18px;
    }

        #dialog.e-dialog .e-footer-content .e-btn {
            margin-left: 0;
        }

    .error-container {
        color: red;
    }

    .errorCreate-container {
        color: red;
    }
</style>