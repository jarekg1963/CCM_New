@inherits LayoutComponentBase
@inject LoginService loginService
@inject HttpClient httpClient
@using Syncfusion.Blazor.Popups;
@using Syncfusion.Blazor.Buttons;
@inject NavigationManager navigationManager;
@using Syncfusion.Blazor.Notifications;
@using Syncfusion.Blazor.Navigations
@using Microsoft.Extensions.Configuration
@using CCM_New.Shared;
@using CCM_New.Client.Tool;
@using System.ComponentModel.DataAnnotations

@if (loginService.isLogged == true)
{
    <div class="sidebar">
        <NavMenu />
    </div>
    <div class="main">
        <div class="top-row px-4">
            <div class="col-2" style="margin-top:10px">
                <p>User: @loginService.session.user.UserName</p>
            </div>
            <div class="col-2">
                <span class="oi oi-account-logout" aria-hidden="true" style="align-self:auto"> </span>
                <a href="" style="cursor: pointer" @onclick="() => Wyloguj()">Logout</a>
            </div>
            <div class="col-1">
         
                <button class="btn1" @onclick="() => ModalPassChange.Open()" data-toggle="tooltip" data-placement="bottom" title="Password change">
            <span class="oi oi-people" aria-hidden="true"></span>
        </button>

            </div>
        </div>
        <div class="content px-4">
            @Body
        </div>
    </div>
}
else
{
    <div class="col-md-6 offset-md-3 mt-5"  >
        <div class="card" >
            <h4 class="card-header">CCM Claim system </h4>
            <div class="card-body">
                <EditForm Model="@user" OnValidSubmit="HandleValidSubmit">      
                    <div class="form-group">
                        <label>Username</label>
                        <InputText @bind-Value="user.UserName" class="form-control" />                      
                    </div>
                    <div class="form-group">
                        <label>Password</label>
                        <InputText @bind-Value="user.UserPassword" type="password" class="form-control" />                      
                    </div>
                    <button class="btn btn-primary">
                        Login
                    </button>
                    <div class="row" style="margin-top:20px">
                        <div class="col-8">
                            <p>Ver: @loginService.softVersion</p>
                        </div>
                        <div class="col-4">                        
                            <button class="btn btn-link" @onclick="() => Modal.Open()">Request for account</button>
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger mt-3 mb-0">@ErrorMessage</div>
                    }
                </EditForm>
            </div>
        </div>
    </div>


}



<CreateUserRequestComponent @ref="Modal"></CreateUserRequestComponent>
<PasswordChangeComponent @ref="ModalPassChange"></PasswordChangeComponent>

<SfToast @ref="ToastObj" Title="Error" Content="User exist . Contact with administartor" CssClass="e-toast-danger">
    <ToastPosition X="Right"></ToastPosition>
</SfToast>

<SfToast @ref="ToastObjPass" Title="Error" Content="Passwords are to the same " CssClass="e-toast-danger">
    <ToastPosition X="Right"></ToastPosition>
</SfToast>

<SfToast @ref="ToastObjAllFields" Title="Error" Content="Fill in all fields " CssClass="e-toast-danger">
    <ToastPosition X="Right"></ToastPosition>
</SfToast>

<SfToast @ref="ToastObjCreated" Title="Error" Content="User created ask administrator about activation  " CssClass="e-toast-danger">
    <ToastPosition X="Right"></ToastPosition>
</SfToast>



@code{

    private CreateUserRequestComponent Modal { get; set; }
    private PasswordChangeComponent ModalPassChange { get; set; }


    SfToast ToastObj;
    SfToast ToastObjPass;
    SfToast ToastObjCreated;
    SfToast ToastObjAllFields;
    private string Target { get; set; } = "body";
    private string ErrorMessage { get; set; } = "";
    private string ErrorMessageCreate { get; set; } = "";
    TblUsers user = new TblUsers() { UserName = "", UserPassword = "", Remarks = "" };
    TblUsers NewUser = new TblUsers() { UserName = "", UserPassword = "", Remarks = "" };
    public bool LoginPageVisible = true;
    public bool createAccount = false;
    public string ToastMessageTxT = "";
    public string passwordVrification = "";
    public string zmRemarks = "";
    public string IconCss = "e-icons e-play";
    public bool changePassword = false;
    public string newPassword = "";
    public string newPasswordVerification = "";
    public TblUsers[] UsersList = { };
    public bool verifyNewAccount = false;
    public string ErrorMessagePassVerification = "";


    private void ValidationCreateAccount(BeforeCloseEventArgs args)
    {
        if (verifyNewAccount)
        {
            if (NewUser.UserName == "" && NewUser.UserPassword == "")
            {
                args.Cancel = true;
                // this.LoginPageVisible = true;
                this.ErrorMessageCreate = "Enter the Username and Password";
            }
        }
    }

    override protected void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        this.IconCss = "e-icons e-pause";
        if (firstRender)
        {
            loginService.refresh += (() => StateHasChanged());
            checkSession();
        }
    }

    async void checkSession()
    {
        string sessionID = await loginService.jSRuntime.InvokeAsync<string>("ReadLocalStorage", new object[] { this.loginService.sessionKey });
        Console.WriteLine($"Session id: {sessionID}");
        if (sessionID != "")
        {
            try
            {
                var session = await httpClient.GetFromJsonAsync<LoginService.Session>($"./api/session?sessionID={sessionID}");

                if (session.ok == true)
                {
                    loginService.session = session;
                    loginService.sessionID = sessionID;
                    loginService.isLogged = true;
                    await loginService.jSRuntime.InvokeVoidAsync("WriteLocalStorage", new object[] { this.loginService.sessionKey, this.loginService.sessionID });
                    this.VerifySecurityLevel();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        loginService.CallRefresh();
    }

    async void HandleValidSubmit()

    // async void login()
    {
        var resp = await httpClient.PostAsJsonAsync<LoginService.Session>("./api/login", new LoginService.Session { user = this.user });
        LoginService.Session s = await resp.Content.ReadFromJsonAsync<LoginService.Session>();

        if (s.ok == true)
        {
            if (s.user.UserRole == null)
            {
                this.ErrorMessage = "User not activated contact with admin.";
            }
            else
            {
                this.loginService.session = s;
                this.loginService.sessionID = s.sessionID;
                this.loginService.isLogged = true;
                await loginService.jSRuntime.InvokeVoidAsync("WriteLocalStorage", new object[] { this.loginService.sessionKey, this.loginService.sessionID });
                LoginPageVisible = false;
                this.VerifySecurityLevel();
                loginService.CallRefresh();
            }
        }
        else
        {
            this.LoginPageVisible = true;
            this.ErrorMessage = "Wrong Username or Password try again";
        }

    }

    async void Wyloguj()
    {
        Console.WriteLine("Wyloguj ");
        await loginService.jSRuntime.InvokeVoidAsync("WriteLocalStorage", new object[] { this.loginService.sessionKey, "" });
        this.loginService.session = null;
        this.loginService.sessionID = "";
        this.loginService.isLogged = false;
        this.loginService.CallRefresh();
        StateHasChanged();
    }

    private void VerifySecurityLevel()
    {
        if (loginService.session.user.UserRole.Trim() == "Admin")
        {
            loginService.securityLevel = 100;
        }
        if (loginService.session.user.UserRole.Trim() == "Warehouse")
        {
            loginService.securityLevel = 10;
        }
        if (loginService.session.user.UserRole.Trim() == "OD")
        {
            loginService.securityLevel = 20;
        }


        loginService.CallRefresh();

    }

 

    private void CloseCreateAccountWindows()
    {
        createAccount = false;
    }

}

<style>


    .btn1 {
        border: none;
        color: black;
        padding: 12px 16px;
        font-size: 16px;
        cursor: pointer;
    }

    .e-plus-icon::before {
        content: '\e823';
    }

    #elementToastTime .e-toast-message {
        padding: 10px;
        text-align: center;
    }

    #dialog.e-dialog .e-dlg-header-content .e-dlg-header {
        text-align: center;
        width: 100%;
        color: #333;
        font-weight: bold;
        font-size: 20px;
    }

    #input-container .e-float-input { /* csslint allow: adjoining-classes */
        margin: 17px 0;
    }

    .e-footer-content {
        padding: 20px 0 0;
        width: 100%;
    }

    .e-dialog .e-footer-content .e-btn {
        width: 100%;
        height: 36px;
    }

    #heading {
        color: #333;
        font-weight: bold;
        margin: 0 0 15px;
        text-align: center;
        font-size: 20px;
    }

    #dialog.e-dialog .e-footer-content {
        padding: 0 18px 18px;
    }

        #dialog.e-dialog .e-footer-content .e-btn {
            margin-left: 0;
        }

    .error-container {
        color: red;
    }

    .errorCreate-container {
        color: red;
    }
</style>